/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cwms.ui;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Asanka
 */
public class SearchItem extends javax.swing.JFrame {
PreparedStatement prepst = null;
ResultSet res = null;
Connection dbcon = null;
    
    /**
     * Creates new form EmployeeProfile
     */
    public SearchItem() {
        initComponents();
        comboFill();
        tableInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton12 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        itemID = new javax.swing.JTextField();
        itemCat = new javax.swing.JComboBox<String>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        itemDateFrom = new com.toedter.calendar.JDateChooser();
        totalFrom = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        totalTo = new javax.swing.JTextField();
        itemDateTo = new com.toedter.calendar.JDateChooser();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        searchBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        itemName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        qtyFrom = new javax.swing.JTextField();
        qtyTo = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        rateFrom = new javax.swing.JTextField();
        rateTo = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(25, 77, 25));

        jLabel1.setFont(new java.awt.Font("Microsoft JhengHei", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Search Item");

        jButton12.setIcon(new javax.swing.ImageIcon("C:\\Users\\USER\\Desktop\\cwms_sherry\\project icons\\Home_26px.png")); // NOI18N
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton10.setIcon(new javax.swing.ImageIcon("C:\\Users\\USER\\Desktop\\cwms_sherry\\project icons\\Back Arrow_26px.png")); // NOI18N

        jButton9.setFont(new java.awt.Font("Microsoft JhengHei", 0, 11)); // NOI18N
        jButton9.setIcon(new javax.swing.ImageIcon("C:\\Users\\USER\\Desktop\\cwms_sherry\\project icons\\Exit_26px.png")); // NOI18N
        jButton9.setText("Exit");

        jLabel2.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Item ID                     :");

        itemID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemIDMouseClicked(evt);
            }
        });

        itemCat.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        itemCat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemCatMouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Item Category          :");

        jLabel5.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Purchased Date       :");

        itemDateFrom.setToolTipText("");
        itemDateFrom.setDateFormatString("dd-MMM-yyyy");
        itemDateFrom.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        itemDateFrom.setMaxSelectableDate(new java.util.Date(4102428682000L));
        itemDateFrom.setMinSelectableDate(new java.util.Date(946666882000L));

        totalFrom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                totalFromMouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Total Amount (Rs.)  :");

        totalTo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                totalToMouseClicked(evt);
            }
        });

        itemDateTo.setDateFormatString("dd-MMM-yyyy");
        itemDateTo.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        itemDateTo.setMaxSelectableDate(new java.util.Date(4102428682000L));
        itemDateTo.setMinSelectableDate(new java.util.Date(946666882000L));

        jLabel16.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("To :");

        jLabel17.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("To :");

        itemTable.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Category", "Item Name", "Purchase Date", "Quantity", "Discount Rate", "Total Amount (Rs.)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(itemTable);

        searchBtn.setFont(new java.awt.Font("Microsoft JhengHei", 0, 12)); // NOI18N
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        resetBtn.setFont(new java.awt.Font("Microsoft JhengHei", 0, 12)); // NOI18N
        resetBtn.setText("Reset");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Item Name               :");

        itemName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemNameMouseClicked(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Quantity                   :");

        qtyFrom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                qtyFromMouseClicked(evt);
            }
        });

        qtyTo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                qtyToMouseClicked(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("To :");

        rateFrom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rateFromMouseClicked(evt);
            }
        });

        rateTo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rateToMouseClicked(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("To :");

        jLabel8.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Discount Rate (%)   :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(270, 270, 270)
                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(264, 264, 264))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel4)
                        .addGap(10, 10, 10)
                        .addComponent(itemCat, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel3)
                        .addGap(13, 13, 13)
                        .addComponent(itemName, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel5)
                        .addGap(9, 9, 9)
                        .addComponent(itemDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel16)
                        .addGap(20, 20, 20)
                        .addComponent(itemDateTo, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel6)
                        .addGap(10, 10, 10)
                        .addComponent(totalFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel17)
                        .addGap(18, 18, 18)
                        .addComponent(totalTo, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel7)
                        .addGap(10, 10, 10)
                        .addComponent(qtyFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel18)
                        .addGap(18, 18, 18)
                        .addComponent(qtyTo, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel8)
                        .addGap(10, 10, 10)
                        .addComponent(rateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel19)
                        .addGap(18, 18, 18)
                        .addComponent(rateTo, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(10, 10, 10)
                                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(12, 12, 12)
                                    .addComponent(itemID, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 939, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton9)
                        .addGap(18, 18, 18)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(itemID, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(itemCat, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(itemName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(itemDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemDateTo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(totalFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalTo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(qtyFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qtyTo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(rateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rateTo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void comboFill() 
    {
        try 
        {
            dbcon = DriverManager.getConnection("jdbc:mysql://localhost:3306/groomings_db?useSSL=false", "root", "");
            String data = "SELECT * FROM itemcat";
            prepst = dbcon.prepareStatement(data);   
            res = prepst.executeQuery();
            itemCat.removeAllItems();

            while(res.next())
            {
               
                String cat = res.getString("cat");
                itemCat.addItem(cat);
                itemCat.setSelectedItem(null);

            }         
        } 
        
        catch (Exception e) 
        {
            e.printStackTrace();
        } 
    }
    
    private void tableInit()
    {
        JTableHeader header= itemTable.getTableHeader();
        TableCellRenderer rendererFromHeader = itemTable.getTableHeader().getDefaultRenderer();
        JLabel headerLabel = (JLabel) rendererFromHeader;
        headerLabel.setHorizontalAlignment(JLabel.CENTER);
    }
    
    private void tableCustom()
    {
        JTableHeader header= itemTable.getTableHeader();
        TableColumnModel colMod = header.getColumnModel();
        
        TableColumn tabCol0 = colMod.getColumn(0);
        tabCol0.setHeaderValue("Item ID");
        TableColumn tabCol1 = colMod.getColumn(1);
        tabCol1.setHeaderValue("Item Category");
        TableColumn tabCol2 = colMod.getColumn(2);
        tabCol2.setHeaderValue("Item Name");
        TableColumn tabCol3 = colMod.getColumn(3);
        tabCol3.setHeaderValue("Purchase Date");
        TableColumn tabCol4 = colMod.getColumn(4);
        tabCol4.setHeaderValue("Quantity");
        TableColumn tabCol5 = colMod.getColumn(5);
        tabCol5.setHeaderValue("Discount Rate (%)");
        TableColumn tabCol6 = colMod.getColumn(6);
        tabCol6.setHeaderValue("Total Amount (Rs.)");

        
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        itemTable.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        itemTable.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        itemTable.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        itemTable.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        itemTable.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        itemTable.getColumnModel().getColumn(5).setCellRenderer( centerRenderer );
        
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment( JLabel.RIGHT );
        itemTable.getColumnModel().getColumn(6).setCellRenderer( rightRenderer );
    }
    
    private void tableCleaner()
    {
        DefaultTableModel model = (DefaultTableModel) itemTable.getModel();
        model.setRowCount(0);
    }
    
    private void cleanAction()
    {       
            itemID.setText(null);   
            itemCat.setSelectedItem(null);
            itemName.setText(null);
            itemDateFrom.setCalendar(null);
            itemDateTo.setCalendar(null);
            totalFrom.setText(null);
            totalTo.setText(null);
            qtyFrom.setText(null);
            qtyTo.setText(null);
            rateFrom.setText(null);
            rateTo.setText(null);
            tableCleaner();

            releaseField();
            subreleaseField();
            itemID.setEnabled(true);
    }
    
    private void passData()
    {
        
        if(     (itemID==null || (itemID.getText().trim().equals(""))) && 
                (itemCat.getSelectedItem()==null) &&
                (itemName==null || (itemName.getText().trim().equals(""))) &&
                (itemDateFrom.getDate()==null) &&
                (itemDateTo.getDate()==null) &&
                (totalFrom==null || (totalFrom.getText().trim().equals(""))) &&
                (totalTo==null || (totalTo.getText().trim().equals(""))) &&
                (qtyFrom==null || (qtyFrom.getText().trim().equals(""))) &&
                (qtyTo==null || (qtyTo.getText().trim().equals(""))) &&
                (rateFrom==null || (rateFrom.getText().trim().equals(""))) &&
                (rateTo==null || (rateTo.getText().trim().equals(""))))
        {
            JOptionPane.showMessageDialog(null, "Please select a filter method");
            return;
        }
        
        else if ((itemID==null || 
                  itemID.getText().trim().equals("")) && 
                  itemCat.getSelectedItem()==null)
        {    
            do
            {
              JOptionPane.showMessageDialog(null, "Please select the Item Category");
              return;  
            }
            while(itemCat.getSelectedItem()!=null);
        }
        
        else if ((itemCat.getSelectedItem()!=null) && 
                 (itemDateFrom.getDate()==null) &&
                 (itemDateTo.getDate()==null))        
        {    
            do
            {
              JOptionPane.showMessageDialog(null, "Please select the Purchase Date filter options to proceed");
              return;  
            }
            while((itemDateFrom.getDate()!=null));
        }
        
        else if ((itemCat.getSelectedItem()!=null) && 
                 (itemDateFrom.getDate()!=null) && 
                 (itemDateTo.getDate()==null))
        {    
            do
            {
              JOptionPane.showMessageDialog(null, "Please complete the Purchase Date filter options to proceed");
              return;  
            }
            while((itemDateTo.getDate()!=null));
        }
        
        else if ((itemCat.getSelectedItem()!=null) && 
                 (itemDateFrom.getDate()==null) && 
                 (itemDateTo.getDate()!=null))
        {    
            do
            {
              JOptionPane.showMessageDialog(null, "Please complete the Purchase Date filter options to proceed");
              return;  
            }
            while((itemDateFrom.getDate()!=null));
        }
        
        
        //Instance #1 (Item ID only)
        else if((itemID!=null || !(itemID.getText().trim().equals(""))) && 
                (itemCat.getSelectedItem()==null) &&
                (itemName==null || itemName.getText().trim().equals("")) &&
                (itemDateFrom.getDate()==null) &&
                (itemDateTo.getDate()==null) &&
                (totalFrom==null || totalFrom.getText().trim().equals("")) &&
                (totalTo==null || totalTo.getText().trim().equals("")) &&
                (qtyFrom==null || qtyFrom.getText().trim().equals("")) &&
                (qtyTo==null || qtyTo.getText().trim().equals("")) &&
                (rateFrom==null || rateFrom.getText().trim().equals("")) &&
                (rateTo==null || rateTo.getText().trim().equals("")))
        {
            try {
                    String tmp = itemID.getText().trim();
                    String check = "SELECT item_id FROM item WHERE item_id=?";
            
                    prepst = dbcon.prepareStatement(check);
                    prepst.setString(1, tmp);
                    ResultSet rest=prepst.executeQuery();
            
            
                    if(!rest.next())
                    {
                        JOptionPane.showMessageDialog(null, "Invalid Item ID");
                        return;
                    }
                    
                    else
                    {
                    
                    String sql = "SELECT item_id,item_category,item_name,pur_date,qty,discount,unit_price FROM item WHERE item_id=?";
                    prepst = dbcon.prepareStatement(sql);
                    
                    String iid = itemID.getText().trim();
                
                    prepst.setString(1, iid);
                    
                    prepst.execute();
                    
                    res=prepst.executeQuery();
                    itemTable.setModel(DbUtils.resultSetToTableModel(res));
                    tableCustom();
                    }
                    
                    postAction();
                }
                catch (Exception e) {
                    e.printStackTrace();
                }

        }//End of Instance #1
        
        //Instance #2 (Item Category + From Date + To Date)
        else if((itemID==null || (itemID.getText().trim().equals(""))) && 
                (itemCat.getSelectedItem()!=null) &&
                (itemName==null || itemName.getText().trim().equals("")) &&
                (itemDateFrom.getDate()!=null) &&
                (itemDateTo.getDate()!=null) &&
                (totalFrom==null || totalFrom.getText().trim().equals("")) &&
                (totalTo==null || totalTo.getText().trim().equals("")) &&
                (qtyFrom==null || qtyFrom.getText().trim().equals("")) &&
                (qtyTo==null || qtyTo.getText().trim().equals("")) &&
                (rateFrom==null || rateFrom.getText().trim().equals("")) &&
                (rateTo==null || rateTo.getText().trim().equals("")))
        {
            try {
                    
                    String sql = "SELECT item_id,item_category,item_name,pur_date,qty,discount,unit_price "
                                 + "FROM item "
                                 + "WHERE ((item_category=?) && (pur_date BETWEEN ? AND ?))";
                    prepst = dbcon.prepareStatement(sql);
                    
                    String tmp = itemCat.getSelectedItem().toString().trim();
                
                    java.util.Date itmdatefrom = itemDateFrom.getDate();
                    SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
                    String fromdate = df.format(itmdatefrom);
                    
                    java.util.Date itmdateto = itemDateTo.getDate();
                    SimpleDateFormat dt = new SimpleDateFormat("dd-MM-yyyy");
                    String todate = dt.format(itmdateto);
                    
                    prepst.setString(1, tmp);
                    prepst.setString(2, fromdate);
                    prepst.setString(3, todate);
                    
                    prepst.execute();
                    
                    res=prepst.executeQuery();
                    itemTable.setModel(DbUtils.resultSetToTableModel(res));
                    tableCustom();
                    
                    postAction();

                }
                catch (Exception e) {
                    e.printStackTrace();
                }

        }//End of Instance #2
        
        /*if (    (itemCat.getSelectedItem()!=null) && 
                (itemDateFrom.getDate()!=null) && 
                (itemDateTo.getDate()!=null) &&
                (totalFrom!=null || !(totalFrom.getText().trim().equals(""))) &&
                (totalTo==null || (totalTo.getText().trim().equals(""))))
        {    
            do
            {
              JOptionPane.showMessageDialog(null, "Please complete the Total Amount filter options to proceed");
              return;  
            }
            while((totalTo!=null || !(totalTo.getText().trim().equals(""))));
        }
        
        if (    (itemCat.getSelectedItem()!=null) && 
                (itemDateFrom.getDate()==null) && 
                (itemDateTo.getDate()!=null) &&
                (totalFrom==null || (totalFrom.getText().trim().equals(""))) &&
                 (totalTo!=null || !(totalTo.getText().trim().equals(""))))
        {    
            do
            {
              JOptionPane.showMessageDialog(null, "Please complete the Total Amount filter options to proceed");
              return;  
            }
            while(totalFrom!=null || !(totalFrom.getText().trim().equals("")));
        }*/
        
        
        //Instance #3 (Item Category + From Date + To Date + From Total + To Total)
        else if((itemID==null || (itemID.getText().trim().equals(""))) && 
                (itemCat.getSelectedItem()!=null) &&
                (itemName==null || (itemName.getText().trim().equals(""))) &&
                (itemDateFrom.getDate()!=null) &&
                (itemDateTo.getDate()!=null) &&
                (totalFrom!=null || !(totalFrom.getText().trim().equals(""))) &&
                (totalTo!=null || !(totalTo.getText().trim().equals(""))) &&
                (qtyFrom==null || qtyFrom.getText().trim().equals("")) &&
                (qtyTo==null || qtyTo.getText().trim().equals("")) &&
                (rateFrom==null || rateFrom.getText().trim().equals("")) &&
                (rateTo==null || rateTo.getText().trim().equals("")))
        {
            try {
                    
                    String sql = "SELECT item_id,item_category,item_name,pur_date,qty,discount,unit_price "
                                + "FROM item "
                                + "WHERE ((item_category=?) && (pur_date BETWEEN ? AND ?) && (unit_price BETWEEN ? AND ?))";
                    
                    prepst = dbcon.prepareStatement(sql);
                    
                    String tmp = itemCat.getSelectedItem().toString().trim();
                
                    java.util.Date itmdatefrom = itemDateFrom.getDate();
                    SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
                    String fromdate = df.format(itmdatefrom);
                    
                    java.util.Date itmdateto = itemDateTo.getDate();
                    SimpleDateFormat dt = new SimpleDateFormat("dd-MM-yyyy");
                    String todate = dt.format(itmdateto);
                    
                    String fromtotal = totalFrom.getText().trim();
                    String tototal = totalTo.getText().trim();
                    
                    prepst.setString(1, tmp);
                    prepst.setString(2, fromdate);
                    prepst.setString(3, todate);
                    prepst.setString(4, fromtotal);
                    prepst.setString(5, tototal);
                    
                    prepst.execute();
                    
                    res=prepst.executeQuery();
                    itemTable.setModel(DbUtils.resultSetToTableModel(res));
                    tableCustom();
                    
                    postAction();

                }
                catch (Exception e) {
                    e.printStackTrace();
                }

        }//End of Instance #3
        
        /*if (     (itemCat.getSelectedItem()!=null) && 
                 (itemDateFrom.getDate()!=null) && 
                 (itemDateTo.getDate()!=null) &&
                 (totalFrom==null || (totalFrom.getText().trim().equals(""))) &&
                 (totalTo==null || (totalTo.getText().trim().equals("")))  &&
                 (qtyFrom!=null || !(qtyFrom.getText().trim().equals(""))) &&
                 (qtyTo==null || (qtyTo.getText().trim().equals(""))))
        {    
            do
            {
              JOptionPane.showMessageDialog(null, "Please complete the Quantity filter options to proceed");
              return;  
            }
            while(qtyTo!=null || !(qtyTo.getText().trim().equals("")));
        }
        
        else if ((itemCat.getSelectedItem()!=null) && 
                 (itemDateFrom.getDate()!=null) && 
                 (itemDateTo.getDate()!=null) &&
                 (totalFrom==null || (totalFrom.getText().trim().equals(""))) &&
                 (totalTo==null || (totalTo.getText().trim().equals("")))  &&
                 (qtyFrom==null || (qtyFrom.getText().trim().equals(""))) &&
                 (qtyTo!=null || !(qtyTo.getText().trim().equals(""))))
        {    
            do
            {
              JOptionPane.showMessageDialog(null, "Please complete the Quantity filter options to proceed");
              return;  
            }
            while(qtyFrom!=null || !(qtyFrom.getText().trim().equals("")));
        }*/        
        
        //Instance #4 (Item Category + From Date + To Date + From Total + To Total + From Qty + To Qty)
        else if((itemID==null || (itemID.getText().trim().equals(""))) && 
                (itemCat.getSelectedItem()!=null) &&
                (itemName!=null || !(itemName.getText().trim().equals(""))) &&
                (itemDateFrom.getDate()!=null) &&
                (itemDateTo.getDate()!=null) &&
                (totalFrom!=null || !(totalFrom.getText().trim().equals(""))) &&
                (totalTo!=null || !(totalTo.getText().trim().equals(""))) &&
                (qtyFrom!=null || !(qtyFrom.getText().trim().equals(""))) &&
                (qtyTo!=null || !(qtyTo.getText().trim().equals(""))) &&
                (rateFrom==null || rateFrom.getText().trim().equals("")) &&
                (rateTo==null || rateTo.getText().trim().equals("")))
        {
            try {
                    
                    String sql = "SELECT item_id,item_category,item_name,pur_date,qty,discount,unit_price "
                                + "FROM item "
                                + "WHERE ((item_category=?) && (pur_date BETWEEN ? AND ?) && (unit_price BETWEEN ? AND ?) && (qty BETWEEN ? AND ?))";
                    
                    prepst = dbcon.prepareStatement(sql);
                    
                    String tmp = itemCat.getSelectedItem().toString().trim();
                
                    java.util.Date itmdatefrom = itemDateFrom.getDate();
                    SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
                    String fromdate = df.format(itmdatefrom);
                    
                    java.util.Date itmdateto = itemDateTo.getDate();
                    SimpleDateFormat dt = new SimpleDateFormat("dd-MM-yyyy");
                    String todate = dt.format(itmdateto);
                    
                    String fromtotal = totalFrom.getText().trim();
                    String tototal = totalTo.getText().trim();
                    
                    String fromqty = qtyFrom.getText().trim();
                    String toqty = qtyTo.getText().trim();
                    
                    prepst.setString(1, tmp);
                    prepst.setString(2, fromdate);
                    prepst.setString(3, todate);
                    prepst.setString(4, fromtotal);
                    prepst.setString(5, tototal);
                    prepst.setString(6, fromqty);
                    prepst.setString(7, toqty);
                    
                    prepst.execute();
                    
                    res=prepst.executeQuery();
                    itemTable.setModel(DbUtils.resultSetToTableModel(res));
                    tableCustom();
                    
                    postAction();

                }
                catch (Exception e) {
                    e.printStackTrace();
                }

        }//End of Instance #4
        
        //Instance #5 (Item Category + From Date + To Date + From Total + To Total + From Qty + To Qty + From Rate + To Rate)
        else if((itemID==null || (itemID.getText().trim().equals(""))) && 
                (itemCat.getSelectedItem()!=null) &&
                (itemName!=null || !(itemName.getText().trim().equals(""))) &&
                (itemDateFrom.getDate()!=null) &&
                (itemDateTo.getDate()!=null) &&
                (totalFrom!=null || !(totalFrom.getText().trim().equals(""))) &&
                (totalTo!=null || !(totalTo.getText().trim().equals(""))) &&
                (qtyFrom!=null || !(qtyFrom.getText().trim().equals(""))) &&
                (qtyTo!=null || !(qtyTo.getText().trim().equals(""))) &&
                (rateFrom!=null || !(rateFrom.getText().trim().equals(""))) &&
                (rateTo!=null || !(rateTo.getText().trim().equals(""))))
        {
            try {
                    
                    String sql = "SELECT item_id,item_category,item_name,pur_date,qty,discount,unit_price "
                                + "FROM item "
                                + "WHERE ((item_category=?) && (pur_date BETWEEN ? AND ?) && (unit_price BETWEEN ? AND ?) && (qty BETWEEN ? AND ?) && (discount BETWEEN ? AND ?))";
                    
                    prepst = dbcon.prepareStatement(sql);
                    
                    String tmp = itemCat.getSelectedItem().toString().trim();
                
                    java.util.Date itmdatefrom = itemDateFrom.getDate();
                    SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
                    String fromdate = df.format(itmdatefrom);
                    
                    java.util.Date itmdateto = itemDateTo.getDate();
                    SimpleDateFormat dt = new SimpleDateFormat("dd-MM-yyyy");
                    String todate = dt.format(itmdateto);
                    
                    String fromtotal = totalFrom.getText().trim();
                    String tototal = totalTo.getText().trim();
                    
                    String fromqty = qtyFrom.getText().trim();
                    String toqty = qtyTo.getText().trim();
                    
                    String fromrate = rateFrom.getText().trim();
                    String torate = rateTo.getText().trim();
                    
                    prepst.setString(1, tmp);
                    prepst.setString(2, fromdate);
                    prepst.setString(3, todate);
                    prepst.setString(4, fromtotal);
                    prepst.setString(5, tototal);
                    prepst.setString(6, fromqty);
                    prepst.setString(7, toqty);
                    prepst.setString(8, fromrate);
                    prepst.setString(9, torate);
                    
                    prepst.execute();
                    
                    res=prepst.executeQuery();
                    itemTable.setModel(DbUtils.resultSetToTableModel(res));
                    tableCustom();
                    
                    postAction();

                }
                catch (Exception e) {
                    e.printStackTrace();
                }

        }//End of Instance #5
        
        //Instance #6 (Item Category +Item Name + From Date + To Date)
        else if((itemID==null || (itemID.getText().trim().equals(""))) && 
                (itemCat.getSelectedItem()!=null) &&
                (itemName!=null || !(itemName.getText().trim().equals(""))) &&
                (itemDateFrom.getDate()!=null) &&
                (itemDateTo.getDate()!=null) &&
                (totalFrom==null || totalFrom.getText().trim().equals("")) &&
                (totalTo==null || totalTo.getText().trim().equals("")) &&
                (qtyFrom==null || qtyFrom.getText().trim().equals("")) &&
                (qtyTo==null || qtyTo.getText().trim().equals("")) &&
                (rateFrom==null || rateFrom.getText().trim().equals("")) &&
                (rateTo==null || rateTo.getText().trim().equals("")))
        {
            try {
                    
                    String sql = "SELECT item_id,item_category,item_name,pur_date,qty,discount,unit_price "
                                + "FROM item "
                                + "WHERE ((item_category=?) && (item_name =?) && (pur_date BETWEEN ? AND ?))";
                    
                    prepst = dbcon.prepareStatement(sql);
                    
                    String tmp = itemCat.getSelectedItem().toString().trim();
                    String iname = itemName.getText().trim();
                
                    java.util.Date itmdatefrom = itemDateFrom.getDate();
                    SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
                    String fromdate = df.format(itmdatefrom);
                    
                    java.util.Date itmdateto = itemDateTo.getDate();
                    SimpleDateFormat dt = new SimpleDateFormat("dd-MM-yyyy");
                    String todate = dt.format(itmdateto);
                  
                    prepst.setString(1, tmp);
                    prepst.setString(2, fromdate);
                    prepst.setString(3, todate);
                    prepst.setString(4, iname);
                    
                    prepst.execute();
                    
                    res=prepst.executeQuery();
                    itemTable.setModel(DbUtils.resultSetToTableModel(res));
                    tableCustom();
                    
                    postAction();

                }
                catch (Exception e) {
                    e.printStackTrace();
                }

        }//End of Instance #6
        
        //Instance #7 (Item Category +Item Name + From Date + To Date + From Total + To Total)
        else if((itemID==null || (itemID.getText().trim().equals(""))) && 
                (itemCat.getSelectedItem()!=null) &&
                (itemName!=null || !(itemName.getText().trim().equals(""))) &&
                (itemDateFrom.getDate()!=null) &&
                (itemDateTo.getDate()!=null) &&
                (totalFrom!=null || !(totalFrom.getText().trim().equals(""))) &&
                (totalTo!=null || !(totalTo.getText().trim().equals(""))) &&
                (qtyFrom!=null || !(qtyFrom.getText().trim().equals(""))) &&
                (qtyTo!=null || !(qtyTo.getText().trim().equals(""))) &&
                (rateFrom==null || rateFrom.getText().trim().equals("")) &&
                (rateTo==null || rateTo.getText().trim().equals("")))
        {
            try {
                    
                    String sql = "SELECT item_id,item_category,item_name,pur_date,qty,discount,unit_price "
                                + "FROM item "
                                + "WHERE ((item_category=?) && (item_name =?) && (pur_date BETWEEN ? AND ?) && (unit_price BETWEEN ? AND ?))";
                    
                    prepst = dbcon.prepareStatement(sql);
                    
                    String tmp = itemCat.getSelectedItem().toString().trim();
                    String iname = itemName.getText().trim();
                
                    java.util.Date itmdatefrom = itemDateFrom.getDate();
                    SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
                    String fromdate = df.format(itmdatefrom);
                    
                    java.util.Date itmdateto = itemDateTo.getDate();
                    SimpleDateFormat dt = new SimpleDateFormat("dd-MM-yyyy");
                    String todate = dt.format(itmdateto);
                    
                    String fromtotal = totalFrom.getText().trim();
                    String tototal = totalTo.getText().trim();
                                       
                    prepst.setString(1, tmp);
                    prepst.setString(2, iname);
                    prepst.setString(3, fromdate);
                    prepst.setString(4, todate);
                    prepst.setString(5, fromtotal);
                    prepst.setString(6, tototal);
                    
                    prepst.execute();
                    
                    res=prepst.executeQuery();
                    itemTable.setModel(DbUtils.resultSetToTableModel(res));
                    tableCustom();
                    
                    postAction();

                }
                catch (Exception e) {
                    e.printStackTrace();
                }

        }//End of Instance #7
        
        /*if (     (itemCat.getSelectedItem()!=null) && 
                 (itemDateFrom.getDate()!=null) && 
                 (itemDateTo.getDate()!=null) &&
                 (totalFrom==null || (totalFrom.getText().trim().equals(""))) &&
                 (totalTo==null || (totalTo.getText().trim().equals("")))  &&
                 (qtyFrom==null || (qtyFrom.getText().trim().equals(""))) &&
                 (qtyTo==null || (qtyTo.getText().trim().equals(""))) &&
                 (rateFrom!=null || !(rateFrom.getText().trim().equals(""))) &&
                 (rateTo==null || (rateTo.getText().trim().equals(""))))
        {    
            do
            {
              JOptionPane.showMessageDialog(null, "Please complete the Discount filter options to proceed");
              return;  
            }
            while(rateTo!=null || !(rateTo.getText().trim().equals("")));
        }
        
        else if ((itemCat.getSelectedItem()!=null) && 
                 (itemDateFrom.getDate()!=null) && 
                 (itemDateTo.getDate()!=null) &&
                 (totalFrom==null || (totalFrom.getText().trim().equals(""))) &&
                 (totalTo==null || (totalTo.getText().trim().equals("")))  &&
                 (qtyFrom==null || (qtyFrom.getText().trim().equals(""))) &&
                 (qtyTo==null || (qtyTo.getText().trim().equals(""))) &&
                 (rateFrom==null || (rateFrom.getText().trim().equals(""))) &&
                 (rateTo!=null || !(rateTo.getText().trim().equals(""))))
        {    
            do
            {
              JOptionPane.showMessageDialog(null, "Please complete the Discount filter options to proceed");
              return;  
            }
            while(rateFrom!=null || !(rateFrom.getText().trim().equals("")));
        }*/
        
        //Instance #8 (Item Category +Item Name + From Date + To Date + From Total + To Total + From Qty + To Qty)
        else if((itemID==null || (itemID.getText().trim().equals(""))) && 
                (itemCat.getSelectedItem()!=null) &&
                (itemName!=null || !(itemName.getText().trim().equals(""))) &&
                (itemDateFrom.getDate()!=null) &&
                (itemDateTo.getDate()!=null) &&
                (totalFrom!=null || !(totalFrom.getText().trim().equals(""))) &&
                (totalTo!=null || !(totalTo.getText().trim().equals(""))) &&
                (qtyFrom!=null || !(qtyFrom.getText().trim().equals(""))) &&
                (qtyTo!=null || !(qtyTo.getText().trim().equals(""))) &&
                (rateFrom==null || rateFrom.getText().trim().equals("")) &&
                (rateTo==null || rateTo.getText().trim().equals("")))
        {
            try {
                    
                    String sql = "SELECT item_id,item_category,item_name,pur_date,qty,discount,unit_price "
                                + "FROM item "
                                + "WHERE ((item_category=?) && (item_name =?) && (pur_date BETWEEN ? AND ?) && (unit_price BETWEEN ? AND ?) && (qty BETWEEN ? AND ?))";
                    
                    prepst = dbcon.prepareStatement(sql);
                    
                    String tmp = itemCat.getSelectedItem().toString().trim();
                    String iname = itemName.getText().trim();
                
                    java.util.Date itmdatefrom = itemDateFrom.getDate();
                    SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
                    String fromdate = df.format(itmdatefrom);
                    
                    java.util.Date itmdateto = itemDateTo.getDate();
                    SimpleDateFormat dt = new SimpleDateFormat("dd-MM-yyyy");
                    String todate = dt.format(itmdateto);
                    
                    String fromtotal = totalFrom.getText().trim();
                    String tototal = totalTo.getText().trim();
                    
                    String fromqty = qtyFrom.getText().trim();
                    String toqty = qtyTo.getText().trim();
                    
                    prepst.setString(1, tmp);
                    prepst.setString(2, iname);
                    prepst.setString(3, fromdate);
                    prepst.setString(4, todate);
                    prepst.setString(5, fromtotal);
                    prepst.setString(6, tototal);
                    prepst.setString(7, fromqty);
                    prepst.setString(8, toqty);
                    
                    prepst.execute();
                    
                    res=prepst.executeQuery();
                    itemTable.setModel(DbUtils.resultSetToTableModel(res));
                    tableCustom();
                    
                    postAction();

                }
                catch (Exception e) {
                    e.printStackTrace();
                }

        }//End of Instance #8
        
        //Instance #9 (Item Category +Item Name + From Date + To Date + From Total + To Total + From Qty + To Qty + From Rate + To Rate)
        else if((itemID==null || (itemID.getText().trim().equals(""))) && 
                (itemCat.getSelectedItem()!=null) &&
                (itemName!=null || !(itemName.getText().trim().equals(""))) &&
                (itemDateFrom.getDate()!=null) &&
                (itemDateTo.getDate()!=null) &&
                (totalFrom!=null || !(totalFrom.getText().trim().equals(""))) &&
                (totalTo!=null || !(totalTo.getText().trim().equals(""))) &&
                (qtyFrom!=null || !(qtyFrom.getText().trim().equals(""))) &&
                (qtyTo!=null || !(qtyTo.getText().trim().equals(""))) &&
                (rateFrom!=null || !(rateFrom.getText().trim().equals(""))) &&
                (rateTo!=null || !(rateTo.getText().trim().equals(""))))
        {
            try {
                    
                    String sql = "SELECT item_id,item_category,item_name,pur_date,qty,discount,unit_price "
                                + "FROM item "
                                + "WHERE ((item_category=?) && (item_name =?) && (pur_date BETWEEN ? AND ?) && (unit_price BETWEEN ? AND ?) && (qty BETWEEN ? AND ?) && (rate BETWEEN ? AND ?))";
                    
                    prepst = dbcon.prepareStatement(sql);
                    
                    String tmp = itemCat.getSelectedItem().toString().trim();
                    String iname = itemName.getText().trim();
                
                    java.util.Date itmdatefrom = itemDateFrom.getDate();
                    SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
                    String fromdate = df.format(itmdatefrom);
                    
                    java.util.Date itmdateto = itemDateTo.getDate();
                    SimpleDateFormat dt = new SimpleDateFormat("dd-MM-yyyy");
                    String todate = dt.format(itmdateto);
                    
                    String fromtotal = totalFrom.getText().trim();
                    String tototal = totalTo.getText().trim();
                    
                    String fromqty = qtyFrom.getText().trim();
                    String toqty = qtyTo.getText().trim();
                    
                    String fromrate = rateFrom.getText().trim();
                    String torate = rateTo.getText().trim();
                    
                    prepst.setString(1, tmp);
                    prepst.setString(2, iname);
                    prepst.setString(3, fromdate);
                    prepst.setString(4, todate);
                    prepst.setString(5, fromtotal);
                    prepst.setString(6, tototal);
                    prepst.setString(7, fromqty);
                    prepst.setString(8, toqty);
                    prepst.setString(9, fromrate);
                    prepst.setString(10, torate);
                    
                    prepst.execute();
                    
                    res=prepst.executeQuery();
                    itemTable.setModel(DbUtils.resultSetToTableModel(res));
                    tableCustom();
                    
                    postAction();

                }
                catch (Exception e) {
                    e.printStackTrace();
                }

        }//End of Instance #9
        
        //Instance #10 (Item Category + From Date + To Date + From Qty + To Qty)
        else if((itemID==null || (itemID.getText().trim().equals(""))) && 
                (itemCat.getSelectedItem()!=null) &&
                (itemName!=null || !(itemName.getText().trim().equals(""))) &&
                (itemDateFrom.getDate()!=null) &&
                (itemDateTo.getDate()!=null) &&
                (totalFrom==null || (totalFrom.getText().trim().equals(""))) &&
                (totalTo==null || (totalTo.getText().trim().equals(""))) &&
                (qtyFrom!=null || !(qtyFrom.getText().trim().equals(""))) &&
                (qtyTo!=null || !(qtyTo.getText().trim().equals(""))) &&
                (rateFrom==null || (rateFrom.getText().trim().equals(""))) &&
                (rateTo==null || (rateTo.getText().trim().equals(""))))
        {
            try {
                    
                    String sql = "SELECT item_id,item_category,item_name,pur_date,qty,discount,unit_price "
                                + "FROM item "
                                + "WHERE ((item_category=?) && (pur_date BETWEEN ? AND ?) && (qty BETWEEN ? AND ?))";
                    
                    prepst = dbcon.prepareStatement(sql);
                    
                    String tmp = itemCat.getSelectedItem().toString().trim();
                
                    java.util.Date itmdatefrom = itemDateFrom.getDate();
                    SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
                    String fromdate = df.format(itmdatefrom);
                    
                    java.util.Date itmdateto = itemDateTo.getDate();
                    SimpleDateFormat dt = new SimpleDateFormat("dd-MM-yyyy");
                    String todate = dt.format(itmdateto);
                    
                    String fromqty = qtyFrom.getText().trim();
                    String toqty = qtyTo.getText().trim();
                    
                    prepst.setString(1, tmp);
                    prepst.setString(2, fromdate);
                    prepst.setString(3, todate);
                    prepst.setString(4, fromqty);
                    prepst.setString(5, toqty);
                    
                    prepst.execute();
                    
                    res=prepst.executeQuery();
                    itemTable.setModel(DbUtils.resultSetToTableModel(res));
                    tableCustom();
                    
                    postAction();

                }
                catch (Exception e) {
                    e.printStackTrace();
                }

        }//End of Instance #11
        
        //Instance #10 (Item Category + From Date + To Date + From Rate + To Rate)
        else if((itemID==null || (itemID.getText().trim().equals(""))) && 
                (itemCat.getSelectedItem()!=null) &&
                (itemName!=null || !(itemName.getText().trim().equals(""))) &&
                (itemDateFrom.getDate()!=null) &&
                (itemDateTo.getDate()!=null) &&
                (totalFrom==null || (totalFrom.getText().trim().equals(""))) &&
                (totalTo==null || (totalTo.getText().trim().equals(""))) &&
                (qtyFrom==null || (qtyFrom.getText().trim().equals(""))) &&
                (qtyTo==null || (qtyTo.getText().trim().equals(""))) &&
                (rateFrom!=null || !(rateFrom.getText().trim().equals(""))) &&
                (rateTo!=null || !(rateTo.getText().trim().equals(""))))
        {
            try {
                    
                    String sql = "SELECT item_id,item_category,item_name,pur_date,qty,discount,unit_price "
                                + "FROM item "
                                + "WHERE ((item_category=?) && (pur_date BETWEEN ? AND ?) && (discount BETWEEN ? AND ?))";
                    
                    prepst = dbcon.prepareStatement(sql);
                    
                    String tmp = itemCat.getSelectedItem().toString().trim();
                
                    java.util.Date itmdatefrom = itemDateFrom.getDate();
                    SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
                    String fromdate = df.format(itmdatefrom);
                    
                    java.util.Date itmdateto = itemDateTo.getDate();
                    SimpleDateFormat dt = new SimpleDateFormat("dd-MM-yyyy");
                    String todate = dt.format(itmdateto);
                    
                    String fromrate = rateFrom.getText().trim();
                    String torate = rateTo.getText().trim();
                    
                    prepst.setString(1, tmp);
                    prepst.setString(2, fromdate);
                    prepst.setString(3, todate);
                    prepst.setString(4, fromrate);
                    prepst.setString(5, torate);
                    
                    prepst.execute();
                    
                    res=prepst.executeQuery();
                    itemTable.setModel(DbUtils.resultSetToTableModel(res));
                    tableCustom();
                    
                    postAction();

                }
                catch (Exception e) {
                    e.printStackTrace();
                }

        }//End of Instance #11
        
    }
    
     private void postAction()
    {   
            int rows = itemTable.getRowCount();
            
       if(rows!=0)        
       {
            JOptionPane.showMessageDialog(null, "Results filtered successfully");
            
            itemID.setText(null);   
            itemCat.setSelectedItem(null);
            itemName.setText(null);
            itemDateFrom.setCalendar(null);
            itemDateTo.setCalendar(null);
            totalFrom.setText(null);
            totalTo.setText(null);
            qtyFrom.setText(null);
            qtyTo.setText(null);
            rateFrom.setText(null);
            rateTo.setText(null);
           
            subreleaseField();
            releaseField();
       }
       else
       {
           JOptionPane.showMessageDialog(null, "No results found");
           return;
       }
       
    }

    public void lockField()
    {
        itemCat.setEnabled(false);
        itemName.setEnabled(false);
        itemDateFrom.setEnabled(false);
        itemDateTo.setEnabled(false);
        totalFrom.setEnabled(false);
        totalTo.setEnabled(false);
        qtyFrom.setEnabled(false);
        qtyTo.setEnabled(false);
        rateFrom.setEnabled(false);
        rateTo.setEnabled(false);
        
        itemCat.setFocusable(false);
        itemName.setFocusable(false);
        itemDateFrom.setFocusable(false);
        itemDateTo.setFocusable(false);
        totalFrom.setFocusable(false);
        totalTo.setFocusable(false);
        qtyFrom.setFocusable(false);
        qtyTo.setFocusable(false);
        rateFrom.setFocusable(false);
        rateTo.setFocusable(false);
        
        
        itemCat.setSelectedItem(null);
        itemName.setText(null);
        itemDateFrom.setCalendar(null);
        itemDateTo.setCalendar(null);
        totalFrom.setText(null);
        totalTo.setText(null);
        qtyFrom.setText(null);
        qtyTo.setText(null);
        rateFrom.setText(null);
        rateTo.setText(null);
        
        
    }
    
    public void sublockField()
    {
        itemID.setEnabled(false);
        itemID.setText(null);
        itemID.setFocusable(false);
    }
    
    public void subreleaseField()
    {
        itemID.setEnabled(true);
        itemID.setFocusable(true);
    }
    
    public void releaseField()
    {
        itemCat.setEnabled(true);
        itemName.setEnabled(true);
        itemDateFrom.setEnabled(true);
        itemDateTo.setEnabled(true);
        totalFrom.setEnabled(true);
        totalTo.setEnabled(true);
        qtyFrom.setEnabled(true);
        qtyTo.setEnabled(true);
        rateFrom.setEnabled(true);
        rateTo.setEnabled(true);
        
        itemCat.setFocusable(true);
        itemName.setFocusable(true);
        itemDateFrom.setFocusable(true);
        itemDateTo.setFocusable(true);
        totalFrom.setFocusable(true);
        totalTo.setFocusable(true);
        qtyFrom.setFocusable(true);
        qtyTo.setFocusable(true);
        rateFrom.setFocusable(true);
        rateTo.setFocusable(true);
    }
    
    
    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        Main m1=new Main();
        m1.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void itemIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemIDMouseClicked
        lockField();
    }//GEN-LAST:event_itemIDMouseClicked

    private void itemCatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemCatMouseClicked
        sublockField();
    }//GEN-LAST:event_itemCatMouseClicked

    private void totalFromMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_totalFromMouseClicked
        sublockField();
    }//GEN-LAST:event_totalFromMouseClicked

    private void totalToMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_totalToMouseClicked
        sublockField();
    }//GEN-LAST:event_totalToMouseClicked

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        passData();
    }//GEN-LAST:event_searchBtnActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        cleanAction();
    }//GEN-LAST:event_resetBtnActionPerformed

    private void itemNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemNameMouseClicked
        sublockField();
    }//GEN-LAST:event_itemNameMouseClicked

    private void qtyFromMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_qtyFromMouseClicked
        sublockField();
    }//GEN-LAST:event_qtyFromMouseClicked

    private void qtyToMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_qtyToMouseClicked
        sublockField();
    }//GEN-LAST:event_qtyToMouseClicked

    private void rateFromMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rateFromMouseClicked
        sublockField();
    }//GEN-LAST:event_rateFromMouseClicked

    private void rateToMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rateToMouseClicked
        sublockField();
    }//GEN-LAST:event_rateToMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchGRN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchGRN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchGRN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchGRN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchItem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> itemCat;
    private com.toedter.calendar.JDateChooser itemDateFrom;
    private com.toedter.calendar.JDateChooser itemDateTo;
    private javax.swing.JTextField itemID;
    private javax.swing.JTextField itemName;
    private javax.swing.JTable itemTable;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField qtyFrom;
    private javax.swing.JTextField qtyTo;
    private javax.swing.JTextField rateFrom;
    private javax.swing.JTextField rateTo;
    private javax.swing.JButton resetBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField totalFrom;
    private javax.swing.JTextField totalTo;
    // End of variables declaration//GEN-END:variables
}
